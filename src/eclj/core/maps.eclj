(in-ns 'eclj.core)

(defn map?
  "Return true if x is not nil and satisfies IMap"
  [x]
  (and (some? x) (satisfies? IMap x)))

(defn hash-map
  "keyval => key val
  Returns a new hash map with supplied mappings.  If any keys are
  equal, they are handled as if by repeated uses of assoc."
  [& keyvals]
  (clojure.lang.PersistentHashMap/create keyvals))

(defn sorted-map
  "keyval => key val
  Returns a new sorted map with supplied mappings.  If any keys are
  equal, they are handled as if by repeated uses of assoc."
  [& keyvals]
  (clojure.lang.PersistentTreeMap/create keyvals))

(defn sorted-map-by
  "keyval => key val
  Returns a new sorted map with supplied mappings, using the supplied
  comparator.  If any keys are equal, they are handled as if by
  repeated uses of assoc."
  [comparator & keyvals]
  (clojure.lang.PersistentTreeMap/create comparator keyvals))

(defn assoc
  "assoc[iate]. When applied to a map, returns a new map of the
  same (hashed/sorted) type, that contains the mapping of key(s) to
  val(s). When applied to a vector, returns a new vector that
  contains val at index. Note - index must be <= (count vector)."
  [map & kvs]
  (loop [ret map
         kvs kvs]
    (if kvs
      (if (next kvs)
        (recur (-assoc ret (first kvs) (second kvs)) (nnext kvs))
        (throw (IllegalArgumentException.
                "assoc expects even number of arguments after map/vector, found odd number")))
      ret)))

(defn get
  "Returns the value mapped to key, not-found or nil if key not present."
  ([map key]
   (-lookup map key))
  ([map key not-found]
   (-lookup map key not-found)))

(defn contains?
  "Returns true if key is present in the given collection, otherwise
  returns false.  Note that for numerically indexed collections like
  vectors and Java arrays, this tests if the numeric key is within the
  range of indexes. 'contains?' operates constant or logarithmic time;
  it will not perform a linear search for a value.  See also 'some'."
  [coll key]
  ;XXX Consider IAssociative's -contains-key? and ISet's -contains.
  (not (identical? (get coll key lookup-sentinel) lookup-sentinel)))

(defn dissoc
  "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s)."
  [map & ks]
  (reduce -dissoc map ks))

(defn find
  "Returns the map entry for key, or nil if key not present."
  [coll k]
  ;XXX Consider IAssociative's -entry-at.
  (let [v (get coll k lookup-sentinel)]
    (when (not (identical? v lookup-sentinel))
      [k v])))

(defn select-keys
  "Returns a map containing only those entries in m whose key is in keys"
  [m keyseq]
  (->> keyseq
    (map #(find m %))
    (remove nil?)
    (into (empty m))))

(defn keys
  "Returns a sequence of the map's keys, in the same order as (seq m)."
  [m]
  (map -key m))

(defn vals
  "Returns a sequence of the map's values, in the same order as (seq m)."
  [m]
  (map -val m))

(defn key
  "Returns the key of the map entry."
  [e]
  (-key e))

(defn val
  "Returns the value in the map entry."
  [e]
  (-val e))

(defn get-in
  "Returns the value in a nested associative structure,
  where ks is a sequence of keys. Returns nil if the key
  is not present, or the not-found value if supplied."
  ([m ks]
   (get-in m ks nil))
  ([m ks not-found]
   (reduce (fn [m k]
             (let [v (get m k lookup-sentinel)]
               (if (identical? v lookup-sentinel)
                 (reduced not-found)
                 v)))
           m, ks)))

(defn assoc-in
  "Associates a value in a nested associative structure, where ks is a
  sequence of keys and v is the new value and returns a new nested structure.
  If any levels do not exist, hash-maps will be created."
  [m [k & ks] v]
  (if ks
    (assoc m k (assoc-in (get m k) ks v))
    (assoc m k v)))

(defn update-in
  "'Updates' a value in a nested associative structure, where ks is a
  sequence of keys and f is a function that will take the old value
  and any supplied args and return the new value, and returns a new
  nested structure.  If any levels do not exist, hash-maps will be
  created."
  [m [k & ks] f & args]
  (if ks
    (assoc m k (apply update-in (get m k) ks f args))
    (assoc m k (apply f (get m k) args))))
