(in-ns 'eclj.core)

(defn assoc
  "assoc[iate]. When applied to a map, returns a new map of the
  same (hashed/sorted) type, that contains the mapping of key(s) to
  val(s). When applied to a vector, returns a new vector that
  contains val at index. Note - index must be <= (count vector)."
  [map & kvs]
  (loop [ret map
         kvs kvs]
    (if kvs
      (if (next kvs)
        (recur (-assoc ret (first kvs) (second kvs)) (nnext kvs))
        (throw (IllegalArgumentException.
                "assoc expects even number of arguments after map/vector, found odd number")))
      ret)))

(defn get
  "Returns the value mapped to key, not-found or nil if key not present."
  ([map key]
   (-lookup map key))
  ([map key not-found]
   (-lookup map key not-found)))

(defn contains?
  "Returns true if key is present in the given collection, otherwise
  returns false.  Note that for numerically indexed collections like
  vectors and Java arrays, this tests if the numeric key is within the
  range of indexes. 'contains?' operates constant or logarithmic time;
  it will not perform a linear search for a value.  See also 'some'."
  [coll key]
  ;XXX Consider IAssociative's -contains-key? and ISet's -contains.
  (not (identical? (get coll key lookup-sentinel) lookup-sentinel)))

(defn dissoc
  "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s)."
  [map & ks]
  (reduce -dissoc map ks))

(defn disj
  "disj[oin]. Returns a new set of the same (hashed/sorted) type, that
  does not contain key(s)."
  [set & ks]
  (reduce -disjoin set ks))

(defn find
  "Returns the map entry for key, or nil if key not present."
  [coll k]
  ;XXX Consider IAssociative's -entry-at.
  (let [v (get coll k lookup-sentinel)]
    (when (not (identical? v lookup-sentinel))
      [k v])))

(defn keys
  "Returns a sequence of the map's keys, in the same order as (seq m)."
  [m]
  (map -key m))

(defn vals
  "Returns a sequence of the map's values, in the same order as (seq m)."
  [m]
  (map -val m))

(defn key
  "Returns the key of the map entry."
  [e]
  (-key e))

(defn val
  "Returns the value in the map entry."
  [e]
  (-val e))
