(in-ns 'eclj.core)

(defn assoc
  "assoc[iate]. When applied to a map, returns a new map of the
  same (hashed/sorted) type, that contains the mapping of key(s) to
  val(s). When applied to a vector, returns a new vector that
  contains val at index. Note - index must be <= (count vector)."
  [map & kvs]
  (loop [ret map
         kvs kvs]
    (if kvs
      (if (next kvs)
        (recur (-assoc ret (first kvs) (second kvs)) (nnext kvs))
        (throw (IllegalArgumentException.
                "assoc expects even number of arguments after map/vector, found odd number")))
      ret)))

(defn dissoc
  "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s)."
  [map & ks]
  (reduce -dissoc map ks))

(defn disj
  "disj[oin]. Returns a new set of the same (hashed/sorted) type, that
  does not contain key(s)."
  [set & ks]
  (reduce -disjoin set ks))

(defn keys
  "Returns a sequence of the map's keys, in the same order as (seq m)."
  [m]
  (map -key m))

(defn vals
  "Returns a sequence of the map's values, in the same order as (seq m)."
  [m]
  (map -val m))

(defn key
  "Returns the key of the map entry."
  [e]
  (-key e))

(defn val
  "Returns the value in the map entry."
  [e]
  (-val e))
