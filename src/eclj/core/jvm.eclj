(in-ns 'eclj.core)

(defn instance?
  "Evaluates x and tests if it is an instance of the class c. Returns
  true or false"
  [^java.lang.Class c x]
  (.isInstance c x))

(defn class?
  "Returns true if x is an instance of Class"
  [x]
  (instance? java.lang.Class x))

(defn cast
  "Throws a ClassCastException if x is not a c, else returns x."
  [^java.lang.Class c x]
  (.cast c x))

(extend-type nil

  ISeqable
  (-seq [o] nil)

  ISeq
  (-first [o] nil)
  (-rest [o] ())

  ISeqable
  (-seq [o] nil)

  INext
  (-next [o] nil)

  IAssociative
  (-entry-at [coll k] nil)
  (-contains-key? [coll k] false)
  (-assoc [coll k v] {k v})

  IStack
  (-peek [coll] nil)
  (-pop [coll] nil)

  ICollection
  (-conj [coll x] (list x))

  IEmptyableCollection
  (-empty [coll] nil)

  ILookup
  (-lookup
    ([o k] nil)
    ([o k not-found] not-found))

  IMap
  (-dissoc [coll x] nil)

  ISet
  (-disjoin [coll x] nil)

)

(extend-protocol ISeqable

  java.lang.Iterable
  (-seq [o]
    (clojure.lang.IteratorSeq/create (.iterator o)))

  java.lang.CharSequence
  (-seq [o]
    (clojure.lang.StringSeq/create o))

  java.util.Map
  (-seq [o]
    (seq (.entrySet o)))

  )

(doseq [arr '["[Ljava.lang.Object;" "[I" "[F" "[D" "[J" "[B" "[C" "[S" "[Z"]]
  (extend (java.lang.Class/forName arr)

    ;; ArraySeq and its primitive specializations have private constructors.
    ISeqable
    {:-seq clojure.core/seq}

    ILookup
    {:-lookup (fn
                ([o k] (-lookup o k nil))
                ([o k not-found]
                  (if (and (number? k) (< -1 k (count o)))
                    (nth o k)
                    not-found)))}

    ))

(extend-protocol ILookup

  java.util.Map
  (-lookup
    ([o k] nil)
    ([o k not-found]
     not-found))

  java.lang.String
  (-lookup
    ([o k] (-lookup o k nil))
    ([o k not-found]
     (if (and (number? k) (< -1 k (count o)))
       (nth o k)
       not-found)))

  clojure.lang.IPersistentSet
  (-lookup
    ([o k] (.get o k))
    ([o k not-found]
     (if (contains? o k)
       (.get o k)
       not-found)))

  )

(extend-protocol IMapEntry

  clojure.lang.IPersistentVector
  (-key [coll]
    (nth coll 0))
  (-val [coll]
    (nth coll 1))

  )

(def lookup-sentinel (java.lang.Object.))

(extend-protocol INamed

  java.lang.String
  (-name [x] x)
  (-namespace [x] nil)

  )

(extend-protocol IDelay clojure.lang.Delay)

(extend-type java.util.concurrent.Future

  IDeref
  (-deref [o] (.get o))

  IDerefWithTimeout
  (-deref-with-timeout [o msec timeout-val]
    (try
      (.get o msec java.util.concurrent.TimeUnit/MILLISECONDS)
      (catch java.util.concurrent.TimeoutException e
        timeout-val)))

  )

(extend-protocol IEquiv

  java.lang.Object
  (-equiv [x y]
    (.equals x y))

  java.lang.Number
  (-equiv [x y]
    (clojure.lang.Numbers/equal x y))

  clojure.lang.IPersistentCollection
  (-equiv [coll o]
    (clojure.lang.Util/pcequiv coll o))

  )

(extend-protocol IHash

  java.lang.Object
  (-hash [o]
    (.hashCode o))

  java.lang.Number
  (-hash [o]
    (clojure.lang.Numbers/hasheq o))

  java.lang.String
  (-hash [o]
    (clojure.lang.Murmur3/hashInt (.hashCode o)))

  )
