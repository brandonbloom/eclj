(in-ns 'eclj.core)

;;TODO: Implement restarts, etc.
(defn signal [condition]
  (raise (merge {:op :condition} condition)))

(defn- recur-handler [f env]
  (fn [effect]
    (when (= (:op effect) :recur)
      (if (tail-effect? effect)
        (answer (eval-syntax {:head :apply :f f :arg (:args effect) :env env}))
        (signal {:error :non-tail-position})))))

(defn apply* [f args] ;TODO: Open dispatch
  (cond

    (instance? eclj.fn.Fn f)
    (let [{:keys [name arities max-fixed-arity env]} f
            argcount (count (if (counted? args)
                              args
                              (take (inc max-fixed-arity) args)))
            {:keys [params expr]} (or (arities argcount)
                                      (and (>= argcount max-fixed-arity)
                                           (arities :more)))
            ;;TODO: port arity checking code from cps interpreter.
            env* (if name (assoc-in env [:locals name] f) env)
            ;;TODO: Don't generate form, destructure to env & use AST directly.
            form `(let [~params '~args] ~expr)]
        (handle-with (recur-handler f env)
          (eval form env*)))

    (instance? clojure.lang.Var f)
    (apply* (raise {:op :deref :ref f}) args)

    (instance? clojure.lang.IFn f)
    (raise {:op :invoke :f f :args args})

    :else (signal {:error :not-callable :f f :args args})

    ))

(defn- spread [arglist]
  (cond
    (nil? arglist) nil
    (nil? (next arglist)) (seq (first arglist))
    :else (cons (first arglist) (spread (next arglist)))))

(defn apply
  "Applies fn f to the argument list formed by prepending intervening
  arguments to args."
  [f & args]
  (apply* f (spread args)))



(defmacro refer-clojure
  "Same as (refer 'eclj.core <filters>)"
  [& filters]
  `(eclj.core/refer '~'eclj.core ~@filters))

(defmacro ns
  "Sets *ns* to the namespace named by name (unevaluated), creating it
  if needed.  references can be zero or more of: (:refer-clojure ...)
  (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)
  with the syntax of refer-clojure/require/use/import/load/gen-class
  respectively, except the arguments are unevaluated and need not be
  quoted. (:gen-class ...), when supplied, defaults to :name
  corresponding to the ns name, :main true, :impl-ns same as ns, and
  :init-impl-ns true. All options of gen-class are
  supported. The :gen-class directive is ignored when not
  compiling. If :gen-class is not supplied, when compiled only an
  nsname__init.class will be generated. If :refer-clojure is not used, a
  default (refer-clojure) is used.  Use of ns is preferred to
  individual calls to in-ns/require/use/import:

  (ns foo.bar
    (:refer-clojure :exclude [ancestors printf])
    (:require (clojure.contrib sql combinatorics))
    (:use (my.lib this that))
    (:import (java.util Date Timer Random)
             (java.sql Connection Statement)))"
  {:arglists '([name docstring? attr-map? references*])}
  [name & references]
  ;;TODO: gen-class
  (let [{:keys [name statements]} (ns/parse &form)]
    `(do
       (clojure.core/in-ns '~name)
       ~@statements
       nil)))

;;XXX Why do I need this? Seems like the clojure.core/ns var is special cased.
(.setMacro #'eclj.core/ns)


(defn ^:private
  maybe-destructured
  [params body]
  (if (every? symbol? params)
    (cons params body)
    (loop [params params
           new-params []
           lets []]
      (if params
        (if (symbol? (first params))
          (recur (next params) (conj new-params (first params)) lets)
          (let [gparam (gensym "p__")]
            (recur (next params) (conj new-params gparam)
                   (-> lets (conj (first params)) (conj gparam)))))
        `(~new-params
          (let ~lets
            ~@body))))))


(defmacro ^:private assert-args
  [& pairs]
  `(do (when-not ~(first pairs)
         (throw (IllegalArgumentException.
                  (str (first ~'&form) " requires " ~(second pairs)
                       " in " ~'*ns* ":" (:line (meta ~'&form))))))
     ~(let [more (nnext pairs)]
        (when more
          (list* `assert-args more)))))


;;; EClj Extensions

(defn ^:eclj ns-env []
  (eclj.env/ns-env))

;;XXX quasi-primitive
(defmacro ^:eclj raise [effect]
  `(eclj.core/raise ~effect))

(defn ^:eclj handle-with* [handler thunk]
  (let [eff (eclj.core/eval-effect (list thunk) (assoc (ns-env) :kernel nil))]
    (raise (or (handler eff) eff))))

(defmacro ^:eclj handle-with [handler & body]
  `(handle-with* ~handler (fn [] ~@body)))

(defn ^:eclj continue [k x]
  (raise (trampoline k x)))


(comment ;XXX

(require 'eclj.interpret.meta :reload)

(defn eval
  "Evaluates the form data structure (not text!) and returns the result.
  Unlike clojure.core/eval, optionally accepts an environment instead of the
  current namespace's environment. May raise effects when called from EClj."
  ([form]
   (eval form (env/ns-env)))
  ([form env]
   (eclj.interpret.meta/eval-result form env)))

)
